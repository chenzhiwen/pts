<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.life.pts</groupId>
	<artifactId>pts</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>war</packaging>
	<name>Person-Tally-System</name>

	<properties>
		<junit.test.version>4.9</junit.test.version>
		<life.framework.version>0.0.1-SNAPSHOT</life.framework.version>
		<apache.struts.version>2.3.4</apache.struts.version>
		<org.springframework.version>3.1.2.RELEASE</org.springframework.version>
		<deploy.tomcat.home>${env.CATALINA_HOME}</deploy.tomcat.home>
		<org.jackson.version>1.9.8</org.jackson.version>
		<javax.servlet.version>2.5</javax.servlet.version>
		<bonecp.version>0.7.1.RELEASE</bonecp.version>
		<mybatis.version>3.1.1</mybatis.version>
		<mybatis-spring.version>1.1.1</mybatis-spring.version>
		<slf4j.version>1.6.3</slf4j.version>
		<logback.version>1.0.0</logback.version>
		<axis2.version>1.5.4</axis2.version>
		<druid-version>0.2.9</druid-version>
		<ors.aspectj.version>1.6.8</ors.aspectj.version>
	</properties>

	<dependencies>
		<!-- if you need jstl 1.1 feature, this dependency is required. -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.1.2</version>
		</dependency>
		<dependency>
			<groupId>taglibs</groupId>
			<artifactId>standard</artifactId>
			<version>1.1.2</version>
		</dependency>
		
		<!-- testing -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.test.version}</version>
			<scope>test</scope>
		</dependency>

		<!-- framework -->
		<dependency>
			<groupId>com.life.framework</groupId>
			<artifactId>life-framework-util</artifactId>
			<version>${life.framework.version}</version>
		</dependency>
		<dependency>
			<groupId>com.life.framework</groupId>
			<artifactId>life-framework-core</artifactId>
			<version>${life.framework.version}</version>
		</dependency>

		<!-- spring aop依赖的两个jar: aspectjrt & aspectjweaver -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjrt</artifactId>
			<version>${ors.aspectj.version}</version>
		</dependency>
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>${ors.aspectj.version}</version>
		</dependency>

		<!-- spring -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aop</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- security -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-core</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-web</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-config</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- json -->
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-core-lgpl</artifactId>
			<version>${org.jackson.version}</version>
		</dependency>
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-mapper-lgpl</artifactId>
			<version>${org.jackson.version}</version>
		</dependency>

		<!-- servlet -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>${javax.servlet.version}</version>
			<scope>provided</scope>
		</dependency>

		<!-- jdbc -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>5.1.18</version>
		</dependency>

		<dependency>
			<groupId>com.jolbox</groupId>
			<artifactId>bonecp-spring</artifactId>
			<version>${bonecp.version}</version>
		</dependency>
		<dependency>
			<groupId>com.jolbox</groupId>
			<artifactId>bonecp</artifactId>
			<version>${bonecp.version}</version>
		</dependency>

		<dependency>
			<groupId>c3p0</groupId>
			<artifactId>c3p0</artifactId>
			<version>0.9.1.2</version>
		</dependency>
		<dependency>
			<groupId>commons-dbcp</groupId>
			<artifactId>commons-dbcp</artifactId>
			<version>1.4</version>
		</dependency>

		<!-- mybatis -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>${mybatis.version}</version>
		</dependency>
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>${mybatis-spring.version}</version>
		</dependency>

		<!-- log4j -->
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.16</version>
			<exclusions>
				<exclusion>
					<groupId>javax.mail</groupId>
					<artifactId>mail</artifactId>
				</exclusion>
				<exclusion>
					<groupId>javax.jms</groupId>
					<artifactId>jms</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.sun.jdmk</groupId>
					<artifactId>jmxtools</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.sun.jmx</groupId>
					<artifactId>jmxri</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j.version}</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>${slf4j.version}</version>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-core</artifactId>
			<version>${logback.version}</version>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${logback.version}</version>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-access</artifactId>
			<version>${logback.version}</version>
		</dependency>

		<!-- druid datasource -->
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>druid</artifactId>
			<version>${druid-version}</version>
		</dependency>

		<dependency>
			<groupId>cglib</groupId>
			<artifactId>cglib</artifactId>
			<version>2.2</version>
		</dependency>
	</dependencies>

	<build>
		<finalName>pt</finalName>
		<plugins>
			<!-- 编译插件，默认使用jdk1.6 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.3.2</version>
				<configuration>
					<source>1.6</source>
					<target>1.6</target>
					<encoding>UTF-8</encoding>
				</configuration>
			</plugin>
			<!-- 使用utf-8编码处理资源文件 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.4.3</version>
				<configuration>
					<encoding>UTF-8</encoding>
				</configuration>
			</plugin>
			<!-- Jrebel插件实现热加载class文件 -->
			<!-- <plugin> <groupId>org.zeroturnaround</groupId> <artifactId>javarebel-maven-plugin</artifactId> 
				<version>1.1.5</version> <executions> <execution> <id>generate-rebel-xml</id> 
				<phase>process-resources</phase> <goals> <goal>generate</goal> </goals> </execution> 
				</executions> </plugin> -->

			<!-- javadoc插件，用来生成API文档 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>2.8</version>
				<configuration>
					<show>private</show>
					<nohelp>true</nohelp>
				</configuration>
			</plugin>
			<!-- 使用 cargo 插件实现自动化部署 -->
			<plugin>
				<groupId>org.codehaus.cargo</groupId>
				<artifactId>cargo-maven2-plugin</artifactId>
				<version>1.1.1</version>
				<configuration>
					<container>
						<containerId>tomcat6x</containerId>
						<type>installed</type>
						<home>${deploy.tomcat.home}</home>
					</container>
					<configuration>
						<type>existing</type>
						<home>${deploy.tomcat.home}</home>
					</configuration>
					<deployer>
						<type>installed</type>
						<deployables>
							<deployable>
								<groupId>${project.groupId}</groupId>
								<artifactId>${project.artifactId}</artifactId>
								<type>war</type>
								<properties>
									<context>${project.build.finalName}</context>
								</properties>
							</deployable>
						</deployables>
					</deployer>
				</configuration>
				<executions>
					<execution>
						<id>pre-undeploy</id>
						<phase>pre-clean</phase>
						<goals>
							<goal>deployer-undeploy</goal>
						</goals>
					</execution>
					<execution>
						<id>verify-deploy</id>
						<phase>install</phase>
						<goals>
							<goal>deployer-deploy</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- 使用yui 压缩js、css文件 -->
			<!-- <plugin> <groupId>net.sf.alchim</groupId> <artifactId>yuicompressor-maven-plugin</artifactId> 
				<executions> <execution> <goals> <goal>compress</goal> </goals> </execution> 
				</executions> </plugin> -->

			<!-- <plugin> YUI Compressor Maven压缩插件 <groupId>net.alchim31.maven</groupId> 
				<artifactId>yuicompressor-maven-plugin</artifactId> <executions> <execution> 
				<goals> <goal>compress</goal> </goals> </execution> </executions> <version>1.3.0</version> 
				<configuration> 读取js,css文件采用UTF-8编码 <encoding>UTF-8</encoding> 不显示js可能的错误 
				<jswarn>false</jswarn> 若存在已压缩的文件，会先对比源文件是否有改动。有改动便压缩，无改动就不压缩 <force>false</force> 
				在指定的列号后插入新行 <linebreakpos>-1</linebreakpos> 压缩之前先执行聚合文件操作 <preProcessAggregates>true</preProcessAggregates> 
				压缩后保存文件后缀 <suffix>.min</suffix> 源目录，即需压缩的根目录 <sourceDirectory>${basedir}/js</sourceDirectory> 
				压缩js和css文件 <includes> <include>**/*.js</include> <include>**/*.css</include> 
				</includes> 以下目录和文件不会被压缩 <excludes> <exclude>**/*.min.js</exclude> <exclude>**/*.min.css</exclude> 
				<exclude>${basedir}/js/extjs/*.js</exclude> </excludes> 压缩后输出文件目录 <outputDirectory>${basedir}/js</outputDirectory> 
				聚合文件 <aggregations> <aggregation> 合并每一个文件后插入一新行 <insertNewLine>true</insertNewLine> 
				需合并文件的根文件夹 <inputDir>${basedir}/js</inputDir> 最终合并的输出文件 <output>${basedir}/js/app/app.js</output> 
				把以下js文件合并成一个js文件，是按顺序合并的 <includes> <include>app/core.js</include> <include>app/mlmanager.js</include> 
				<include>app/tmpl.js</include> <include>app/ui.js</include> </includes> </aggregation> 
				</aggregations> </configuration> </plugin> -->
		</plugins>
	</build>
</project>
